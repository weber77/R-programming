View(sw)
sw <- starwars %>%
select(name, height, mass, gender) %>%
rename(weight  = mass) %>%
na.omit() %>%
mutate( height = height / 100)
View(sw)
# give variables different names
sw <- starwars %>%
select(name, mass, height, gender) %>%
rename(weight = mass) %>%  # can be used to create a new variable or change an existing variable
filter(gender == "masculine" | gender == "feminine")
View(sw)
# give variables different names
sw <- starwars %>%
select(name, mass, height, gender) %>%
rename(weight = mass) %>%  # can be used to create a new variable or change an existing variable
# filter(gender == "masculine" | gender == "feminine")
filter(gender %in% c("feminine", "masculine"))
View(sw)
# give variables different names
sw <- starwars %>%
select(name, mass, height, gender) %>%
rename(weight = mass) %>%  # can be used to create a new variable or change an existing variable
# filter(gender == "masculine" | gender == "feminine")
filter(gender %in% c("feminine", "masculine")) %>%
mutate(gender = recode(gender ,
masculine = "m",
feminine = "f"))
View(sw)
sw <- starwars %>%
select(name, height, mass, gender) %>%
rename(weight  = mass) %>%
na.omit() %>%
mutate( height = height / 100) %>%  # can be used to create a new variable or change an existing variable
# filter(gender == "masculine" | gender == "feminine")
filter(gender %in% c("feminine", "masculine")) %>%
mutate(gender = recode(gender ,
masculine = "m",
feminine = "f"))
%>%  # can be used to create a new variable or change an existing variable
# filter(gender == "masculine" | gender == "feminine")
filter(gender %in% c("feminine", "masculine")) %>%
mutate(gender = recode(gender ,
masculine = "m",
feminine = "f"))
View(sw)
sw <- starwars %>%
select(name, height, mass, gender) %>%
rename(weight  = mass) %>%
na.omit() %>%
mutate( height = height / 100) %>%  # can be used to create a new variable or change an existing variable
# filter(gender == "masculine" | gender == "feminine")
filter(gender %in% c("feminine", "masculine")) %>%
mutate(gender = recode(gender
masculine = "m"
feminine = "f"))
sw <- starwars %>%
select(name, height, mass, gender) %>%
rename(weight  = mass) %>%
na.omit() %>%
mutate( height = height / 100) %>%  # can be used to create a new variable or change an existing variable
# filter(gender == "masculine" | gender == "feminine")
filter(gender %in% c("feminine", "masculine")) %>%
mutate(gender = recode(gender masculine = "m" feminine = "f"))
View(people)
View(people)
View(sw)
sw <- starwars %>%
select(name, height, mass, gender) %>%
rename(weight  = mass) %>%
na.omit() %>%
mutate( height = height / 100) %>%  # can be used to create a new variable or change an existing variable
# filter(gender == "masculine" | gender == "feminine")
filter(gender %in% c("feminine", "masculine")) %>%
mutate(gender = recode(gender ,
masculine = "m",
feminine = "f")) %>%
mutate(size = heigh >1 & weight > 75)
sw <- starwars %>%
select(name, height, mass, gender) %>%
rename(weight  = mass) %>%
na.omit() %>%
mutate( height = height / 100) %>%  # can be used to create a new variable or change an existing variable
# filter(gender == "masculine" | gender == "feminine")
filter(gender %in% c("feminine", "masculine")) %>%
mutate(gender = recode(gender ,
masculine = "m",
feminine = "f")) %>%
mutate(size = height >1 & weight > 75)
View(sw)
sw <- starwars %>%
select(name, height, mass, gender) %>%
rename(weight  = mass) %>%
na.omit() %>%
mutate( height = height / 100) %>%  # can be used to create a new variable or change an existing variable
# filter(gender == "masculine" | gender == "feminine")
filter(gender %in% c("feminine", "masculine")) %>%
mutate(gender = recode(gender ,
masculine = "m",
feminine = "f")) %>%
mutate(size = height >1 & weight > 75,
size = if_else(size == TRUE, "big", "small"))
View(msleep)
ms <- msleep %>%
select(name, sleep_total) %>%
filter(sleep_total > 18)
View(ms)
ms <- msleep %>%
select(name, order, bodywt, sleep_total) %>%
filter(order == "Primates" & bodywt > 18)
#disjunction "|"
ms <- msleep %>%
select(name, order, bodywt, sleep_total) %>%
filter(order == "Primates" | bodywt > 18) # you can "," in place of "&"
ms <- msleep %>%
select(name, order, bodywt, sleep_total) %>%
filter(name == "Cow" |
name == "Dog" |
name == "Goat") # you can "," in place of "&"
ms <- msleep %>%
select(name, order, bodywt, sleep_total) %>%
filter(name %in% c("Cat", "Dog", "Sheep")) # you can "," in place of "&"
ms <- msleep %>%
select(name, order, bodywt, sleep_total) %>%
filter(name %in% c("Lion", "Dog", "Sheep")) # you can "," in place of "&"
#Range
ms <- msleep %>%
select(name, sleep_total) %>%
filter(between(sleep_total, 18, 20)) # ! stands for not
#Approximation
#Range
ms <- msleep %>%
select(name, sleep_total) %>%
filter(near(sleep_total, 18, tol = 3)) # ! stands for not
ms <- msleep %>%
select(name, order, bodywt, sleep_total) %>%
filter(name %in% c("Lion"& "Dog"& "Sheep")) # you can "," in place of "&"
# missen value
ms <- msleep %>%
select(name, conversation, sleep_total) %>%
filter(is.na(conversation))
# missen value
ms <- msleep %>%
select(name, conservation, sleep_total) %>%
filter(is.na(conservation))
view(cars)
plot(cars)
sum(age,height)
age <- 29
height <- 1.65
sum(age,height)
hist(cars$speed) # histogram of speed
hist(dist)
#to user variables in a object without the "$"
attach(cars)
hist(dist)
#getting summaries
summarise(cars)
#getting summaries
summary(cars)
summary(cars$speed)
class(cars)
class(cars$speed)
#getting lengths
length(cars)
length(cars$speed)
#unique values
unique(speed)
#unique values
unique(cars$speed)
# read in range
cars[1:5, 1:2] # row, column
#creating a subframe
subframe <- cars[1:5, 1:2] # row, column
#help
?median
new_data <- c(2,234,4324,234, NA, 234)
median(new_data)
median(new_data, na.rm = TRUE)
data()
names(msleep) # list of all variable in the data set msleep
ggsave("test")
msleep %>%
drop_na(vore) %>% # drop na from: vores animal category per feeding mode : carnivores, insectivores, herbivores
# you could live out the argument in drop_na() but R will exclude every row containing an NA. this
# is not good approximation of you data set. try it
ggplot(aes(x = vore))+ # x and y axis
geom_bar(fill = "97B3C6")+ #Bar chat is best for single categorical variable bcs we're counting
# coord_flip() # to flip coordinate good for large number of variables in data set
theme_bw()+ # theme black & white
labs(x = "Vore",
y = NULL,
title = "Number of observations per order")
ggsave("test")
msleep %>%
drop_na(vore) %>% # drop na from: vores animal category per feeding mode : carnivores, insectivores, herbivores
# you could live out the argument in drop_na() but R will exclude every row containing an NA. this
# is not good approximation of you data set. try it
ggplot(aes(x = vore))+ # x and y axis
geom_bar(fill = "#97B3C6")+ #Bar chat is best for single categorical variable bcs we're counting
# coord_flip() # to flip coordinate good for large number of variables in data set
theme_bw()+ # theme black & white
labs(x = "Vore",
y = NULL,
title = "Number of observations per order")
msleep %>%
drop_na(vore) %>% # drop na from: vores animal category per feeding mode : carnivores, insectivores, herbivores
# you could live out the argument in drop_na() but R will exclude every row containing an NA. this
# is not good approximation of you data set. try it
ggplot(aes(x = vore))+ # x and y axis
geom_bar(fill = "#97B3C6")+ #Bar chat is best for single categorical variable bcs we're counting
# coord_flip() # to flip coordinate good for large number of variables in data set
theme_bw()+ # theme black & white
labs(x = "Vore",
y = NULL,
title = "Number of observations per order")+
ggsave("test")
msleep %>%
drop_na(vore) %>% # drop na from: vores animal category per feeding mode : carnivores, insectivores, herbivores
# you could live out the argument in drop_na() but R will exclude every row containing an NA. this
# is not good approximation of you data set. try it
# ggplot(aes(x = vore))+ # x and y axis
ggplot(aes(fct_inorder((vore))))+
geom_bar(fill = "#97B3C6")+ #Bar chat is best for single categorical variable bcs we're counting
# coord_flip() # to flip coordinate good for large number of variables in data set
theme_bw()+ # theme black & white
labs(x = "Vore",
y = NULL,
title = "Number of observations per order")
msleep %>%
drop_na(vore) %>% # drop na from: vores animal category per feeding mode : carnivores, insectivores, herbivores
# you could live out the argument in drop_na() but R will exclude every row containing an NA. this
# is not good approximation of you data set. try it
# ggplot(aes(x = vore))+ # x and y axis
ggplot(aes(fct_infreq((vore))))+
geom_bar(fill = "#97B3C6")+ #Bar chat is best for single categorical variable bcs we're counting
# coord_flip() # to flip coordinate good for large number of variables in data set
theme_bw()+ # theme black & white
labs(x = "Vore",
y = NULL,
title = "Number of observations per order")
msleep %>%
drop_na(vore) %>%
ggplot(aes(x = vore))+
geom_histogram(binwidth = 2, fill = "#97B3C6")+
theme_bw()+
labs(x = "Vore",
y = NULL,
title = "Number of observations per order")
msleep %>%
drop_na(vore) %>%
ggplot(aes(awake))+
geom_histogram(binwidth = 2, fill = "#97B3C6")+
theme_bw()+
labs(x = "Vore",
y = NULL,
title = "Number of observations per order")
my_data <- read.csv("yahoo.csv") #Comma separated values
clear
my_data <- read.csv("yahoo.csv") #Comma separated values
my_data <- read.csv("yahoo.csv") # Comma separated value
# view data
head(my_data)
tail(my_data)
View(my_data)
View(my_data)
View(my_data)
View(my_data)
View(my_data)
tail(my_data)
# view data
head(my_data)
head(my_data)
tail(my_data)
View(my_data)
# Extract components of your data frame
# Rows are observations
# Columns are variables
my_data[1,3] #[row, column]
# Extract components of your data frame
# Rows are observations
# Columns are variables
my_data[1,4] #[row, column]
my_data[ ,3] #entire column 3
High <- my_data[ ,3] #entire column 3
my_data[ ,3] #entire column 3
my_data <- read.csv("yahoo.csv") # Comma separated value
# Extract components of your data frame
# Rows are observations
# Columns are variables
my_data[1,4] #[row, column]
my_data[ ,3] #entire column 3
my_high <- my_data[ ,3] #entire column 3
View(my_high)
my_high[10]
my_data$Open #entire column by name
my_data$Open #entire column by name
people <- read.csv("people.csv")
View(people)
people$age
people$name
people$names
people$heigh
my_data <- read.csv("new.maf") # Comma separated value
require(maftools)
library(maftools)
install.packages(maftools)
install.package(maftools)
install.package("maftools")
install.packages("maftools")
require("maftools")
library("maftools")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
require("maftools")
laml <- read.maf(maf = laml.maf)
laml.maf <- system.file("extdata", "sample.maf.gz", package = "maftools")
laml <- read.maf(maf = laml.maf)
# Extract components of your data frame
# Rows are observations
# Columns are variables
my_data[1,4] #[row, column]
# Types of data
#  - Understand the five must important types of data
#  - Change the data type for a variable
#  - Add "levels" to a factor variable
people <- read.csv("people.csv")
str(people) # asking for structure of people, R tell us what it think each column contains as data type #NB numeric is continous variable e.g decimal numbers
#change data type
people$height <- as.factor(people$height)
levels(people$height) # check what R think of height lebel order
people$old <- people$age > 23
view(people)
View(people)
library(readr)
people <- read_csv("people.csv")
View(people)
people$old <- people$age > 40
View(people)
sum(people$age > 30)
1+2
class(4)
4%%3
"hello,"
x <-2
2**x
(x->2)
(y->2)
y->4
(y<-2)
1:50
1:50
length("ok","kjh")
length(c("ok","kjh"))
[v <- 1:5]
(v<-1:6)
v[c(7,9,0)]
d[c(7,9,0)]
v[c(1,2,0)]
v%%0 ==0
v%%0 ==1
v
v[c(TRUE,FALSE,TRue,FALSE,TRUE)]
v[c(TRUE,FALSE,TRUE,FALSE,TRUE)]
v %% 2 == 0
[v %% 2 == 0]
v[v %% 2 == 0]
xv[v %% 2 == 0]
xv(c([v %% 2 == 0]))
xv(c[v %% 2 == 0])
v[v %% 2 == 0]
c(v[v %% 2 == 0])
xi = c(v[v %% 2 == 0])
v[-(1:3)]
v = v[-(1:3)]
v(1:6)
v<-1:5
v <- c("A" = 1, "B" = 2, "C" = 3)
v
v["A"]
v <- c("A" = 1:5, "B" = 2, "C" = 3)
v
v <- c("A" = 1, "B" = 2, "C" = 3)
v <- c("A" = 1:5, "B" = 2, "C" = 3)
x <- 1:4
y <- 5:8
x ^2
y^2
x-y
x-y
x^2-y
f(5,y=6)
c?
d
?c
?+
?%%
? %%
? `+`
? `%%`
square <- funtion(x) x^2
square <- funtion(x) x**2
square <- function(x) x**2
square(1:4)
e->4
4->e
SS <- function(x,y){}
SS <- function(x,y){squared <- x^2 squared -y}
SS <- function(x,y){squared <- x^2 squared -y}
SS <- function(x,y) x^@ -y
SS <- function(x,y) x^2 -y
SS(1:5, rev(1:5))
sum(1:4)
(1:30^2)
((1:30)^2)
sum(2)
avg <- function(x) sum(x)/length(x)
avg(1:5)
average <- function(x) {
n <- length(x)
sum(x) / n
}
?mean
(x <- c(0:10, 50))
xm <- mean(x)
x(xm, mean(x, trim = 0.10))
c(xm, mean(x, trim = 0.10))
View(SS)
View(SS)
View(SS)
if ( 1 > 2) x <- "bar" else "baz"
if ( 3 > 2) x <- "bar" else "baz"
x
if ( v < 3) "bar" else "baz"
if ( v < 3) "bar" else "baz"
ifelse(v > 3, "bar", "baz")
?ifelse
x <- c(6:-4)
sqrt(ifelse(x >= 0, x, NA))
(x <- c(6:-4))
(x <- seq(as.Date("2000-02-29"), as.Date("2004-10-04"), by = "1 month"))
(x <- seq(as.Date("2000-02-29"), as.Date("2004-10-04"), by = "1 week"))
maybe_square(1:5)
maybe_square <- function(x){
if (x %%2 == 0){
x**2
}else{
x
}
}
maybe_square(1:5)
maybe_square <- Vectorize(maybe_square)
maybe_square(1:5)
View(SS)
View(SS)
x <- 1:5
for (elt in x) total <- total + elt
total <- 0
for (elt in x) total <- total + elt
total
total <- total + elt
#As with if statment if you want the body to contain more than one expression, use brackets
for (index in seq_along(x)) {
elt <- x[index]
total <- total + elt
}
total <- total +elt
while( index <= length(x)){
elt <- x[index]
index <- index +1
total <- total +elt
}
repeat{
elt <- x[index]
total <- total + elt
index <- index + 1
if(index > length(x)) break
}
View(people)
View(people)
f <- factor(c("small", "small", "medium", "large", "small", "large"))
f
levels(f)
ff <- factor(c("small",  "small", "medium", "large", "small", "large"),
levels = c("small", "medium", "large"))
levels(ff)
summary(ff
summary(f)
summary(f)
summary(ff)
#By default factors dont treat levels as ordered. to emphasize the order
#you need to specify if as below
of <- factor(c( "small", "medium", "large", "small", "large"),
levels = c("small", "medium", "large"),
ordered = TRUE)
levels(of)
of
ordered(f, levels = c("small", "medium", "large"))
#We could also use the oredered() function
ordered(ff)
s <- LETTERS[1:5]
s
names(v) <- LETTERS[1:4]
v <- 1:4
names(v) <- LETTERS[1:4]
v
ff <- factor(LETTERS[1:4])
(ff <- factor(LETTERS[1:4]))
v[ff]
(ff <- factor(LETTERS[1:4], levels = rev(LETTERS[1:4])))
